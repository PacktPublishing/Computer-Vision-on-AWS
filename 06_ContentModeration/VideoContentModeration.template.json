{
 "Resources": {
  "Bucket83908E77": {
   "Type": "AWS::S3::Bucket",
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "VideoContentModeration/Bucket/Resource"
   }
  },
  "BucketNotifications8F2E257D": {
   "Type": "Custom::S3BucketNotifications",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "Bucket83908E77"
    },
    "NotificationConfiguration": {
     "LambdaFunctionConfigurations": [
      {
       "Events": [
        "s3:ObjectCreated:*"
       ],
       "LambdaFunctionArn": {
        "Fn::GetAtt": [
         "StartAnalysisFunction605FCF41",
         "Arn"
        ]
       }
      }
     ]
    },
    "Managed": true
   },
   "DependsOn": [
    "BucketAllowBucketNotificationsToVideoContentModerationStartAnalysisFunctionD5F4D9739DF18EC3"
   ],
   "Metadata": {
    "aws:cdk:path": "VideoContentModeration/Bucket/Notifications/Resource"
   }
  },
  "BucketAllowBucketNotificationsToVideoContentModerationStartAnalysisFunctionD5F4D9739DF18EC3": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "StartAnalysisFunction605FCF41",
      "Arn"
     ]
    },
    "Principal": "s3.amazonaws.com",
    "SourceAccount": {
     "Ref": "AWS::AccountId"
    },
    "SourceArn": {
     "Fn::GetAtt": [
      "Bucket83908E77",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "VideoContentModeration/Bucket/AllowBucketNotificationsToVideoContentModerationStartAnalysisFunctionD5F4D973"
   }
  },
  "TopicBFC7AF6E": {
   "Type": "AWS::SNS::Topic",
   "Metadata": {
    "aws:cdk:path": "VideoContentModeration/Topic/Resource"
   }
  },
  "AuditQueue1D3C234B": {
   "Type": "AWS::SQS::Queue",
   "Properties": {
    "MessageRetentionPeriod": 604800
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "VideoContentModeration/AuditQueue/Resource"
   }
  },
  "AuditQueuePolicyAD440BFB": {
   "Type": "AWS::SQS::QueuePolicy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "sqs:SendMessage",
       "Condition": {
        "ArnEquals": {
         "aws:SourceArn": {
          "Ref": "TopicBFC7AF6E"
         }
        }
       },
       "Effect": "Allow",
       "Principal": {
        "Service": "sns.amazonaws.com"
       },
       "Resource": {
        "Fn::GetAtt": [
         "AuditQueue1D3C234B",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Queues": [
     {
      "Ref": "AuditQueue1D3C234B"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "VideoContentModeration/AuditQueue/Policy/Resource"
   }
  },
  "AuditQueueVideoContentModerationTopicBBBE81C367E0B219": {
   "Type": "AWS::SNS::Subscription",
   "Properties": {
    "Protocol": "sqs",
    "TopicArn": {
     "Ref": "TopicBFC7AF6E"
    },
    "Endpoint": {
     "Fn::GetAtt": [
      "AuditQueue1D3C234B",
      "Arn"
     ]
    },
    "RawMessageDelivery": true
   },
   "DependsOn": [
    "AuditQueuePolicyAD440BFB"
   ],
   "Metadata": {
    "aws:cdk:path": "VideoContentModeration/AuditQueue/VideoContentModerationTopicBBBE81C3/Resource"
   }
  },
  "RekognitionRole7EFA3C18": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "rekognition.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "VideoContentModeration/RekognitionRole/Resource"
   }
  },
  "RekognitionRoleDefaultPolicyDCAE9C8E": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "sns:Publish",
       "Effect": "Allow",
       "Resource": {
        "Ref": "TopicBFC7AF6E"
       }
      },
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "Bucket83908E77",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "Bucket83908E77",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "RekognitionRoleDefaultPolicyDCAE9C8E",
    "Roles": [
     {
      "Ref": "RekognitionRole7EFA3C18"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "VideoContentModeration/RekognitionRole/DefaultPolicy/Resource"
   }
  },
  "StartAnalysisFunctionServiceRole723CB268": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     },
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/AmazonRekognitionReadOnlyAccess"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "VideoContentModeration/StartAnalysisFunction/ServiceRole/Resource"
   }
  },
  "StartAnalysisFunctionServiceRoleDefaultPolicy0BECB2A7": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:DeleteObject*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging",
        "s3:Abort*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "Bucket83908E77",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "Bucket83908E77",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "StartAnalysisFunctionServiceRoleDefaultPolicy0BECB2A7",
    "Roles": [
     {
      "Ref": "StartAnalysisFunctionServiceRole723CB268"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "VideoContentModeration/StartAnalysisFunction/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "StartAnalysisFunction605FCF41": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ZipFile": "import boto3\nfrom json import dumps\nfrom os import environ\nrekognition = boto3.client('rekognition')\n\nNOTIFICATION_CHANNEL_ROLEARN = environ.get('NOTIFICATION_CHANNEL_ROLEARN')\nNOTIFICATION_CHANNEL_SNSTOPIC_ARN = environ.get('NOTIFICATION_CHANNEL_SNSTOPIC_ARN')\n\ndef lambda_handler(event, context):\n    for record in event['Records']:\n        bucket = record['s3']['bucket']['name']\n        name = record['s3']['bucket']['object']['key']\n\n        print(\"StartContentModeration(s3://{}/{})\".format(\n            bucket,name))\n        moderation_job = rekognition.start_content_moderation(\n            NotificationChannel={\n                'RoleArn': NOTIFICATION_CHANNEL_ROLEARN,\n                'SNSTopicArn': NOTIFICATION_CHANNEL_SNSTOPIC_ARN\n            },\n            Video={\n                'S3Object':{\n                    'Bucket':bucket,\n                    'Name':name\n                }\n            })\n        print(dumps(moderation_job, indent=2))"
    },
    "Role": {
     "Fn::GetAtt": [
      "StartAnalysisFunctionServiceRole723CB268",
      "Arn"
     ]
    },
    "Architectures": [
     "x86_64"
    ],
    "Environment": {
     "Variables": {
      "BUCKET_NAME": {
       "Ref": "Bucket83908E77"
      },
      "NOTIFICATION_CHANNEL_ROLEARN": {
       "Fn::GetAtt": [
        "RekognitionRole7EFA3C18",
        "Arn"
       ]
      },
      "NOTIFICATION_CHANNEL_SNSTOPIC_ARN": {
       "Ref": "TopicBFC7AF6E"
      }
     }
    },
    "Handler": "index.lambda_handler",
    "Runtime": "python3.9"
   },
   "DependsOn": [
    "StartAnalysisFunctionServiceRoleDefaultPolicy0BECB2A7",
    "StartAnalysisFunctionServiceRole723CB268"
   ],
   "Metadata": {
    "aws:cdk:path": "VideoContentModeration/StartAnalysisFunction/Resource"
   }
  },
  "GetResultsFunctionServiceRole14B0392F": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     },
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/AmazonRekognitionReadOnlyAccess"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "VideoContentModeration/GetResultsFunction/ServiceRole/Resource"
   }
  },
  "GetResultsFunctionServiceRoleDefaultPolicyCC07E8D1": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:DeleteObject*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging",
        "s3:Abort*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "Bucket83908E77",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "Bucket83908E77",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "GetResultsFunctionServiceRoleDefaultPolicyCC07E8D1",
    "Roles": [
     {
      "Ref": "GetResultsFunctionServiceRole14B0392F"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "VideoContentModeration/GetResultsFunction/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "GetResultsFunction4147919F": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ZipFile": "import os\nimport boto3\nfrom json import loads\n\nBUCKET_NAME = os.environ.get('BUCKET_NAME')\n\nrekognition = boto3.client('rekognition')\ncloudwatch = boto3.client('cloudwatch')\ndef get_complete_content_moderation_results(jobId):\n    next_token = None\n    complete_response = None\n    while True:\n        if next_token:\n            response = rekognition.get_content_moderation(            \n            JobId=jobId,\n            NextToken=next_token)        \n            complete_response['ModerationLabels'].extend(response['ModerationLabels'])\n        else:\n            response = rekognition.get_content_moderation(\n            JobId=jobId)\n            complete_response = response\n\n        if 'NextToken' in response:\n            next_token = response['NextToken']\n        else:\n            break\n    return complete_response\n\n\ndef get_frequency(notification):\n    moderation_results = get_complete_content_moderation_results(notification['JobId'])\n    parent_frequency = {}\n    for label in moderation_results['ModerationLabels']:\n        name = label['ModerationLabel']['Name']\n        parent = label['ModerationLabel']['ParentName']\n\n        if len(parent) == 0:\n            parent = 'TopLevel'\n        if len(name) == 0:\n            name = \"None\"\n\n        if parent not in parent_frequency:\n            parent_frequency[parent]= { name: 1 }\n        else:\n            if name not in parent_frequency[parent]:\n                parent_frequency[parent][name]=1\n            else:\n                parent_frequency[parent][name] += 1\n    return parent_frequency\n\ndef publish_metrics(frequency):\n    metric_data = []\n    for (parent,secondary) in frequency.items():\n        metric_data.append({\n            'MetricName':'ContentModeration',\n            'Dimensions': [\n                {\n                    'Name': 'TopLevel',\n                    'Value': str(parent),\n                }\n            ],\n            'Value': sum(secondary.values()),\n            'Unit':'Count',\n        })\n        for (name, count) in secondary.items():\n            metric_data.append({\n                'MetricName':'ContentModeration',\n                'Dimensions': [\n                    {\n                        'Name': 'TopLevel',\n                        'Value': str(parent),\n                        'Name': 'Secondary',\n                        'Value': str(name),\n                    }\n                ],\n                'Value': count,\n                'Unit':'Count',\n            })\n\n    cloudwatch.put_metric_data(\n        Namespace='VideoContentModeration',\n        MetricData=metric_data)\n\ndef lambda_handler(event,context):\n    print(event)\n    for record in event['Records']:\n        notification = loads(record['Sns']['Message'])\n        print(notification)\n        frequency = get_frequency(notification)\n        publish_metrics(frequency)\n\n"
    },
    "Role": {
     "Fn::GetAtt": [
      "GetResultsFunctionServiceRole14B0392F",
      "Arn"
     ]
    },
    "Architectures": [
     "x86_64"
    ],
    "Environment": {
     "Variables": {
      "BUCKET_NAME": {
       "Ref": "Bucket83908E77"
      }
     }
    },
    "Handler": "index.lambda_handler",
    "Runtime": "python3.9"
   },
   "DependsOn": [
    "GetResultsFunctionServiceRoleDefaultPolicyCC07E8D1",
    "GetResultsFunctionServiceRole14B0392F"
   ],
   "Metadata": {
    "aws:cdk:path": "VideoContentModeration/GetResultsFunction/Resource"
   }
  },
  "GetResultsFunctionAllowInvokeVideoContentModerationTopicBBBE81C3431FCD3D": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "GetResultsFunction4147919F",
      "Arn"
     ]
    },
    "Principal": "sns.amazonaws.com",
    "SourceArn": {
     "Ref": "TopicBFC7AF6E"
    }
   },
   "Metadata": {
    "aws:cdk:path": "VideoContentModeration/GetResultsFunction/AllowInvoke:VideoContentModerationTopicBBBE81C3"
   }
  },
  "GetResultsFunctionTopic2EED070E": {
   "Type": "AWS::SNS::Subscription",
   "Properties": {
    "Protocol": "lambda",
    "TopicArn": {
     "Ref": "TopicBFC7AF6E"
    },
    "Endpoint": {
     "Fn::GetAtt": [
      "GetResultsFunction4147919F",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "VideoContentModeration/GetResultsFunction/Topic/Resource"
   }
  },
  "CloudWatchMetricsPolicyA3A9EE8C": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "cloudwatch:PutMetricData",
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "CloudWatchMetricsPolicyA3A9EE8C",
    "Roles": [
     {
      "Ref": "GetResultsFunctionServiceRole14B0392F"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "VideoContentModeration/CloudWatchMetricsPolicy/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "VideoContentModeration/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:PutBucketNotification",
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "Roles": [
     {
      "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "VideoContentModeration/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
    "Code": {
     "ZipFile": "import boto3  # type: ignore\nimport json\nimport logging\nimport urllib.request\n\ns3 = boto3.client(\"s3\")\n\nEVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'\n\nCONFIGURATION_TYPES = [\"TopicConfigurations\", \"QueueConfigurations\", \"LambdaFunctionConfigurations\"]\n\ndef handler(event: dict, context):\n  response_status = \"SUCCESS\"\n  error_message = \"\"\n  try:\n    props = event[\"ResourceProperties\"]\n    bucket = props[\"BucketName\"]\n    notification_configuration = props[\"NotificationConfiguration\"]\n    request_type = event[\"RequestType\"]\n    managed = props.get('Managed', 'true').lower() == 'true'\n    stack_id = event['StackId']\n\n    if managed:\n      config = handle_managed(request_type, notification_configuration)\n    else:\n      config = handle_unmanaged(bucket, stack_id, request_type, notification_configuration)\n\n    put_bucket_notification_configuration(bucket, config)\n  except Exception as e:\n    logging.exception(\"Failed to put bucket notification configuration\")\n    response_status = \"FAILED\"\n    error_message = f\"Error: {str(e)}. \"\n  finally:\n    submit_response(event, context, response_status, error_message)\n\ndef handle_managed(request_type, notification_configuration):\n  if request_type == 'Delete':\n    return {}\n  return notification_configuration\n\ndef handle_unmanaged(bucket, stack_id, request_type, notification_configuration):\n  external_notifications = find_external_notifications(bucket, stack_id)\n\n  if request_type == 'Delete':\n    return external_notifications\n\n  def with_id(notification):\n    notification['Id'] = f\"{stack_id}-{hash(json.dumps(notification, sort_keys=True))}\"\n    return notification\n\n  notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external = external_notifications.get(t, [])\n    incoming = [with_id(n) for n in notification_configuration.get(t, [])]\n    notifications[t] = external + incoming\n\n  if EVENTBRIDGE_CONFIGURATION in notification_configuration:\n    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]\n  elif EVENTBRIDGE_CONFIGURATION in external_notifications:\n    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return notifications\n\ndef find_external_notifications(bucket, stack_id):\n  existing_notifications = get_bucket_notification_configuration(bucket)\n  external_notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f\"{stack_id}-\")]\n\n  if EVENTBRIDGE_CONFIGURATION in existing_notifications:\n    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return external_notifications\n\ndef get_bucket_notification_configuration(bucket):\n  return s3.get_bucket_notification_configuration(Bucket=bucket)\n\ndef put_bucket_notification_configuration(bucket, notification_configuration):\n  s3.put_bucket_notification_configuration(Bucket=bucket, NotificationConfiguration=notification_configuration)\n\ndef submit_response(event: dict, context, response_status: str, error_message: str):\n  response_body = json.dumps(\n    {\n      \"Status\": response_status,\n      \"Reason\": f\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\",\n      \"PhysicalResourceId\": event.get(\"PhysicalResourceId\") or event[\"LogicalResourceId\"],\n      \"StackId\": event[\"StackId\"],\n      \"RequestId\": event[\"RequestId\"],\n      \"LogicalResourceId\": event[\"LogicalResourceId\"],\n      \"NoEcho\": False,\n    }\n  ).encode(\"utf-8\")\n  headers = {\"content-type\": \"\", \"content-length\": str(len(response_body))}\n  try:\n    req = urllib.request.Request(url=event[\"ResponseURL\"], headers=headers, data=response_body, method=\"PUT\")\n    with urllib.request.urlopen(req) as response:\n      print(response.read().decode(\"utf-8\"))\n    print(\"Status code: \" + response.reason)\n  except Exception as e:\n      print(\"send(..) failed executing request.urlopen(..): \" + str(e))\n"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      "Arn"
     ]
    },
    "Runtime": "python3.7",
    "Timeout": 300
   },
   "DependsOn": [
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
   ],
   "Metadata": {
    "aws:cdk:path": "VideoContentModeration/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/02PTQvCMAyGf4v3LooTxKuCV+fHXbquYtzWzqVBpOy/27V+XZonb54QOofFCmYT+aBMVXXWYAn+6KSqRYjOnnLwa1a1dmJzMYkG0ci2rCT4EBW6b5EIrRFbNsqNEOIPD4IMgT/ZDtWYJzhySarH7mP/92HjHjb2rFmPswTxLWyD6vkNUzsIlC34g22iHutPfDtDHGmy3Kuo7dh1HP+0sabCdLh4uqs10xyWkE9uhJj1bBy2Gg6pvgCpqZj1LQEAAA=="
   },
   "Metadata": {
    "aws:cdk:path": "VideoContentModeration/CDKMetadata/Default"
   },
   "Condition": "CDKMetadataAvailable"
  }
 },
 "Outputs": {
  "NotificationChannelRoleArn": {
   "Description": "The role used by Amazon Rekognition for publishing updates",
   "Value": {
    "Fn::GetAtt": [
     "RekognitionRole7EFA3C18",
     "Arn"
    ]
   },
   "Export": {
    "Name": "NotificationChannel-RoleArn"
   }
  },
  "NotificationChannelSNSTopicArn": {
   "Description": "The topic for receiving Amazon Rekognition notifications",
   "Value": {
    "Ref": "TopicBFC7AF6E"
   },
   "Export": {
    "Name": "NotificationChannel-SNSTopicArn"
   }
  },
  "VideoBucket": {
   "Description": "The input Amazon S3 bucket for holding video files",
   "Value": {
    "Ref": "Bucket83908E77"
   },
   "Export": {
    "Name": "Video-InputBucket"
   }
  }
 },
 "Conditions": {
  "CDKMetadataAvailable": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "af-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-northwest-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-2"
       ]
      }
     ]
    }
   ]
  }
 }
}